# Major change by @Fl1yd
#
# Channel: @ftgmodulesbyfl1yd
# ============================

import os
from .. import loader, utils
from telethon.tl.functions.photos import GetUserPhotosRequest
from telethon.tl.functions.users import GetFullUserRequest
from telethon.tl.types import MessageEntityMentionName


def register(cb):
    cb(WhoIsMod())


class WhoIsMod(loader.Module):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ (–≤–∫–ª—é—á–∞—è –≤–∞—Å!)."""
    strings = {'name': 'WhoIs'}

    async def whoiscmd(self, whos):
        """–ò—Å–ø–æ–ª—å–∑—É–π .whois <@ –∏–ª–∏ —Ä–µ–ø–ª–∞–π>; –Ω–∏—á–µ–≥–æ"""
        await whos.edit("<b>–ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...</b>")
        replied_user = await get_user(whos)

        try:
            photo, caption = await fetch_info(replied_user, whos)
        except AttributeError:
            whos.edit("<b>–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.</b>")
            return

        message_id_to_reply = whos.reply_to_msg_id
        if not message_id_to_reply:
            message_id_to_reply = None

        try:
            await whos.client.send_file(whos.chat_id, photo, caption=caption,
                                        link_preview=False, force_document=False,
                                        reply_to=message_id_to_reply, parse_mode="html")
            if not photo.startswith("http"):
                os.remove(photo)
            await whos.delete()
        except TypeError:
            await whos.edit(caption, parse_mode="html")


async def get_user(event):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å —Ä–µ–ø–ª–∞—è –∏–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞."""
    if event.reply_to_msg_id and not utils.get_args_raw(event):
        previous_message = await event.get_reply_message()
        replied_user = await event.client(GetFullUserRequest(previous_message.from_id))
    else:
        user = utils.get_args_raw(event)
        if user.isnumeric():
            user = int(user)
        if not user:
            self_user = await event.client.get_me()
            user = self_user.id
        if event.entities is not None:
            probable_user_mention_entity = event.entities[0]
            if isinstance(probable_user_mention_entity, MessageEntityMentionName):
                user_id = probable_user_mention_entity.user_id
                replied_user = await event.client(GetFullUserRequest(user_id))
                return replied_user
        try:
            user_object = await event.client.get_entity(user)
            replied_user = await event.client(GetFullUserRequest(user_object.id))
        except:
            self_user = await event.client.get_me()
            user = self_user.id
            user_object = await event.client.get_entity(user)
            replied_user = await event.client(GetFullUserRequest(user_object.id))
            return replied_user
    return replied_user


async def fetch_info(replied_user, event):
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
    replied_user_profile_photos = await event.client(GetUserPhotosRequest(user_id=replied_user.user.id,
                                                                          offset=42, max_id=0, limit=80))
    replied_user_profile_photos_count = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏."
    try:
        replied_user_profile_photos_count = replied_user_profile_photos.count
    except AttributeError as e:
        pass
    user_id = replied_user.user.id
    first_name = replied_user.user.first_name
    last_name = replied_user.user.last_name
    common_chat = replied_user.common_chats_count
    username = replied_user.user.username
    user_bio =5172839378438849164>üíª</emoji> <b>replied_user.about
    photo = await event.client.download_profile_photo(user_id, str(user_id) + ".jpg", download_big=True)
    first_name = first_name.replace("\u2060", "") if first_name else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª –∏–º—è."
    username = "@{}".format(username) if username else "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞."
    user_bio = "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ." if not user_bio else user_bio

    caption = "<b> Account Information:</b>\n\n"
    
    caption += f"<b>name :</b> {first_name}\n"
    caption += f"<b>User:</b> {username}\n"
    caption += f"<b>.ID:</b> <code>{user_id}</code>\n"
    caption += f"<b>.bio :</b> \n<code>{user_bio}</code>\n\n"
    caption += f"<b>Number of avatars:</b> {replied_user_profile_photos_count}\n"
    caption += f"<b>Number of shared groups:</b> {common_chat}\n"
    caption += f"<b>Account link :</b> "
    caption += f"<a href=\"tg://user?id={user_id}\">Click</a>"

    return photo, caption
